What is REST
REST (Representational State Transfer) — is an architecture style for designing loosely coupled applications over the network. It has guiding principles and constraints. These principles must be satisfied if a service interface needs to be referred to as RESTful. A Web API (or Web Service) conforming to the REST architectural style is a REST API.

Architectural Constraints
REST defines 6 architectural constraints which make any web service — a truly RESTful API. Let’s consider each of them.

Uniform Interface
As the constraint name itself applies, you must decide APIs interface for resources inside the system which are exposed to API consumers and follow religiously. A resource in the system should have only one logical URI, which should provide a way to fetch related or additional data. It’s always better to synonymize a resource with a web page.

Client–Server
This constraint essentially means that client applications and server applications must be able to evolve separately without any dependency on each other. A client should know only resource URIs, and that’s all. Today, this is standard practice in web development, so nothing fancy is required from your side. Keep it simple.

Stateless
Make all client-server interactions stateless. The server will not store anything about the client's latest HTTP request. It will treat every request as new. No session, no history.

If the client application needs to be a stateful application for the end-user, where the user logs in once and does other authorized operations after that, then each request from the client should contain all the information necessary to service the request — including authentication and authorization details. No client context shall be stored on the server between requests. The client is responsible for managing the state of the application.

Cacheable
In REST, caching shall be applied to resources when applicable, and then these resources MUST declare themselves cacheable. Caching can be implemented on the server or client side.

Layered System
REST allows you to use a layered system architecture where you deploy the APIs on server A, and store data on server B and authenticate requests on server C. A client cannot ordinarily tell whether it is connected directly to the end server or an intermediary along the way.

Code on Demand
It is an optional constraint. Most of the time, you will be sending the static representations of resources in the XML or JSON forms. But when you need to, you are free to return executable code to support a part of your application, e.g., clients may call your API to get a UI widget rendering code. It is permitted.

Що таке REST
REST (Representational State Transfer) — це стиль архітектури для проектування слабозв’язаних програм через мережу. Він має керівні принципи та обмеження. Ці принципи мають бути виконані, якщо інтерфейс служби потрібно називати RESTful. Веб-API (або веб-служба), що відповідає архітектурному стилю REST, є REST API.

Архітектурні обмеження
REST визначає 6 архітектурних обмежень, які роблять будь-який веб-сервіс справді RESTful API. Розглянемо кожен з них.

Уніфікований інтерфейс
Оскільки сама назва обмеження застосовна, ви повинні визначити інтерфейс API для ресурсів усередині системи, які доступні для споживачів API, і слідувати їм вірно. Ресурс у системі повинен мати лише один логічний URI, який повинен забезпечувати спосіб отримання пов’язаних або додаткових даних. Завжди краще синонімізувати ресурс із веб-сторінкою.

Клієнт–Сервер
Це обмеження, по суті, означає, що клієнтські програми та серверні програми повинні мати можливість розвиватися окремо без будь-якої залежності один від одного. Клієнт повинен знати тільки URI ресурсів, і це все. Сьогодні це стандартна практика веб-розробки, тому з вашого боку не потрібно нічого вигадливого. Не ускладнювати.

Stateless
Сервер не зберігатиме нічого про останній HTTP-запит клієнта. Він розглядатиме кожен запит як новий. Ні сесії, ні історії.

Якщо клієнтська програма має бути програмою зі збереженням стану для кінцевого користувача, де користувач входить один раз і виконує інші авторизовані операції після цього, тоді кожен запит від клієнта повинен містити всю інформацію, необхідну для обслуговування запиту, включаючи автентифікацію та деталі авторизації. Контекст клієнта не повинен зберігатися на сервері між запитами. Клієнт несе відповідальність за управління станом програми.

Кешується
У REST кешування має застосовуватися до ресурсів, коли це можливо, і тоді ці ресурси ПОВИННІ оголосити, що їх можна кешувати. Кешування може бути реалізовано на стороні сервера або клієнта.

Багатошарова система
REST дозволяє використовувати багаторівневу архітектуру системи, де ви розгортаєте API на сервері A, зберігаєте дані на сервері B і перевіряєте запити на сервері C. Клієнт зазвичай не може визначити, чи підключено він безпосередньо до кінцевого сервера чи до посередника вздовж спосіб.

Код на вимогу
Це необов'язкове обмеження. У більшості випадків ви надсилатимете статичні представлення ресурсів у формах XML або JSON. Але коли вам потрібно, ви можете повернути виконуваний код для підтримки частини вашої програми, наприклад, клієнти можуть викликати ваш API, щоб отримати код візуалізації віджета інтерфейсу користувача. Це дозволено.